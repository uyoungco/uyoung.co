<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2018 暴走 yu 人节参展日记]]></title>
    <url>%2Fbaozouyurenjie%2F</url>
    <content type="text"><![CDATA[暴走 yu 人节是暴走漫画首届互动娱乐展会，作为暴走粉当然不能错过，很早就买了票。总体感觉还是很棒的，嘉宾阵容强大，互动很多（还可以跟王尼玛一起上厕所），诚意满满，但不足也很明显，暴走 yu 人节主要内容集中在主舞台的节目表演，但上海新国际博览中心的现场座位远远不够，感觉还是更适合在类似 BML 的举办地梅赛德斯-奔驰文化中心这种地方举办。上午去得比较晚，逛了下厂商展台，没看节目，中午暴走家族在主舞台互动了一波，然后就是下午的节目。醋醋超级可爱，被圈粉了$(function(){var e=new DPlayer({container:document.getElementById("dplayer-bz-1"),preload:"metadata",video:{url:"https://imgone.uyoung.co/hexo/video/1_baozou.mp4"},danmaku:{id:"diygodme-bz-1",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e)})&nbsp;$(function(){var e=new DPlayer({container:document.getElementById("dplayer-bz-2"),preload:"metadata",video:{url:"https://imgone.uyoung.co/hexo/video/2_baozou.mp4"},danmaku:{id:"diygodme-bz-2",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e)})金馆长哦哈哈哈哈哈哈$(function(){var e=new DPlayer({container:document.getElementById("dplayer-bz-3"),preload:"metadata",video:{url:"https://imgone.uyoung.co/hexo/video/3_baozou.mp4"},danmaku:{id:"diygodme-bz-3",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e)})&nbsp;$(function(){var e=new DPlayer({container:document.getElementById("dplayer-bz-4"),preload:"metadata",video:{url:"https://imgone.uyoung.co/hexo/video/4_baozou.mp4"},danmaku:{id:"diygodme-bz-4",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e)})暴走家族全阵容，激动$(function(){var e=new DPlayer({container:document.getElementById("dplayer-bz-5"),preload:"metadata",video:{url:"https://imgone.uyoung.co/hexo/video/5_baozou.mp4"},danmaku:{id:"diygodme-bz-5",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e)})咬人猫 赤九玖 有咩酱还说什么，舔爆就行了$(function(){var e=new DPlayer({container:document.getElementById("dplayer-bz-6"),preload:"metadata",video:{url:"https://imgone.uyoung.co/hexo/video/6_baozou.mp4"},danmaku:{id:"diygodme-bz-6",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e)})&nbsp;$(function(){var e=new DPlayer({container:document.getElementById("dplayer-bz-7"),preload:"metadata",video:{url:"https://imgone.uyoung.co/hexo/video/7_baozou.mp4"},danmaku:{id:"diygodme-bz-7",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e)})&nbsp;$(function(){var e=new DPlayer({container:document.getElementById("dplayer-bz-8"),preload:"metadata",video:{url:"https://imgone.uyoung.co/hexo/video/8_baozou.mp4"},danmaku:{id:"diygodme-bz-8",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e)})视频视频转载 diygod]]></content>
      <categories>
        <category>日记本</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[rss和IFTTT订阅博客]]></title>
    <url>%2FgugujiAndrss%2F</url>
    <content type="text"><![CDATA[先晒一张我的咕咕机首先来到IFTTT]]></content>
      <categories>
        <category>学习册</category>
      </categories>
      <tags>
        <tag>咕咕机</tag>
        <tag>RSS</tag>
        <tag>IFTTT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[来上海的日子]]></title>
    <url>%2FgoShangHairizi%2F</url>
    <content type="text"><![CDATA[路程刚刚过去新年，初四的晚上我踏上了不能回头的路然后路上就遇到了大雾，在服务区呆了一晚上。等雾散去才开始继续出发抵达在我来到上海第一天 就能和小金金、DIY还有小萌一起吃饭感觉真是太好了我真的非常感谢他们奔波还能为啥，找工作呗。最后在地铁五号线附近找到了一份工作地图是我第一面试的外包公司，真的有点坑 还好没去水土不服最近一直感冒 还时不时的发烧 药还很贵真的不敢买]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[我喜欢的音乐]]></title>
    <url>%2Fmy-favorite-songs%2F</url>
    <content type="text"><![CDATA[$(function(){$.ajax({url:"https://api.i-meto.com/meting/api?server=netease&type=playlist&id=75099864",success:function(e){var a=new APlayer({element:document.getElementById("aplayer1"),showlrc:3,theme:"#ad7a86",listmaxheight:"280px",mode:"random",music:JSON.parse(e)});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})&nbsp;同步自：uyoung喜欢的音乐 - 网易云音乐自豪地使用 Meting 和 APlayer 构建]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[mp2使用]]></title>
    <url>%2FServer-4%2F</url>
    <content type="text"><![CDATA[mp2使用权限问题权限问题current 当前的服务所允运行的文件夹shared 啥子源代码source 日志问题什么的1234567891011121314// 在本地执行$ pm2 deploy ecosystem.json production setup--&gt; Deploying to production environment--&gt; on host 服务器的IP ○ hook pre-setupmkdir: cannot create directory ‘/www/website/production’: Permission deniedmkdir: cannot create directory ‘/www/website/production’: Permission deniedmkdir: cannot create directory ‘/www/website/production’: Permission denied setup paths failedDeploy failed// 是由于权限问题 在服务器执行下面$ sudo chmod 777 website 1234567891011121314151617181920212223242526272829$ pm2 deploy ecosystem.json production--&gt; Deploying to production environment--&gt; on host 118.89.249.88 ○ deploying origin/master ○ executing pre-deploy-local ○ hook pre-deploy ○ fetching updates ○ full fetchFetching originWarning: Permanently added the ECDSA host key for IP address '116.211.167.14' to the list of known hosts. ○ resetting HEAD to origin/masterHEAD is now at 3a5d2c9 Merge branch 'master' of gitee.com:uyang/backend-website ○ executing post-deploy `export NODE_ENV=production &amp;&amp; pm2 startOrRestart ecosystem.json --env production`bash: pm2: command not found post-deploy hook failedDeploy failed// 出现上方问题是 回到服务器用户目录$ cd ~$ vi .bashrc// 注释掉一下代码case $- in *i*) ;; *) return;;esac// 执行下面即可$ source .bashrc pm2配置文件12345678910111213141516171819202122232425262728293031// ecosystem.json&#123; "apps":[ &#123; "name": "名称", "script": "启动文件", "env": &#123; "COMMON_VARIABLE": "true" &#125;, "env_production": &#123; "NODE_ENV":"production" &#125; &#125; ], "deploy": &#123; "production": &#123; "user": "uyoung", "host": ["IP"], "port": "ssh端口", "ref": "origin/master", "repo": "git@项目地址", "path": "/www/recruitapp/production", "ssh_options": "StrictHostKeyChecking=no", "post-deploy": "npm install &amp;&amp; yarn run build &amp;&amp; pm2 startOrRestart ecosystem.json --env production", "env": &#123; "NODE_ENV": "production" &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>学习册</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>服务器</tag>
        <tag>防火墙</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建Nodejs生产环境]]></title>
    <url>%2FServer-3%2F</url>
    <content type="text"><![CDATA[搭建Nodejs生产环境安装模块使用mp2管理Nodejs进程安装NginxMongDB安装+管理权限设置MongDB 数据迁移MongDB 自动备份安装模块123456789101112131415uyoung@VM-0-11-ubuntu:~$ sudo apt-get install vim openssl build-essential libssl-dev wget curl gituyoung@VM-0-11-ubuntu:~$ nvm install 8.9.4uyoung@VM-0-11-ubuntu:~$ nvm use v8.9.4Now using node v8.9.4 (npm v5.6.0)uyoung@VM-0-11-ubuntu:~$ nvm alias default v8.9.4default -&gt; v8.9.4uyoung@VM-0-11-ubuntu:~$ node -vv8.9.4uyoung@VM-0-11-ubuntu:~$ npm --registry=https://registry.npm.taobao.org install -g npmuyoung@VM-0-11-ubuntu:~$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p 使用mp2管理Nodejs进程12345678pm2 start app.jspm2 listpm2 show apppm2 log 安装Nginx1234567891011121314// 服务器可能预装apache uyoung@VM-0-11-ubuntu:~$ sudo service apache2 stop// 更新包列表uyoung@VM-0-11-ubuntu:~$ sudo apt-get update// 安装Nginxuyoung@VM-0-11-ubuntu:~$ sudo apt-get install nginx// 进入 /etc/nginx/conf.d/ 创建文件 z-uyonug-cn-8081.conf// sudo nginx -t 检查文件// 重启 Nginxuyoung@VM-0-11-ubuntu:/etc/nginx/conf.d$ sudo nginx -s reloaduyoung@VM-0-11-ubuntu:/etc/nginx$ sudo service nginx reload MongDB安装+管理权限设置12345678910111213141516171819202122232425262728293031323334353637// 开启MongoDBuyoung@VM-0-11-ubuntu:/etc/nginx$ sudo service mongod start// 停止开启MongoDBuyoung@VM-0-11-ubuntu:/etc/nginx$ sudo service mongod stop// 重启uyoung@VM-0-11-ubuntu:/etc/nginx$ sudo service mongod restart// 进入mongo命令行&gt; use admin //输入switched to db admin&gt; db.createUser(&#123;user:'用户名',pwd:'密码',roles:[&#123;role:'userAdminAnyDatabase',db:'admin'&#125;]&#125;) //创建全局管理员Successfully added user: &#123; "user" : "uyoung", "roles" : [ &#123; "role" : "userAdminAnyDatabase", "db" : "admin" &#125; ]&#125;// 为imooc-chat 数据库设置单独读写账户&gt; db.createUser(&#123;user:'imooc_chat',pwd:'imooc',roles:[&#123;role:'readWrite',db:'imooc-chat'&#125;]&#125;)// 只读账户用于备份程序db.createUser(&#123;user:'imooc_chat_wheel',pwd:'beifen',roles:[&#123;role:'read',db:'imooc-chat'&#125;]&#125;)// 开启验证模式uyoung@VM-0-11-ubuntu:~$ sudo vi /etc/mongod.confsecurity: authorization: 'enabled'// 进入数据库后&gt; use admin&gt; db.auth('用户名', '密码') //返回1认证成功$ mongo 127.0.0.1:27017/imooc-chat -u imooc_chat -p imooc MongDB 数据迁移MongDB 自动备份12345// 创建脚本uyoung@VM-0-11-ubuntu:~$ mkdir taskuyoung@VM-0-11-ubuntu:~$ mv task tasksuyoung@VM-0-11-ubuntu:~$ cd tasks/ 12345678910111213141516171819#!/bin/shbackUpFolder=/home/uyoung/backup/imooc-chatdate_now=`data +%Y_%m_%d_%H%M`backFileName=imooc-chat_$date_nowcd backUpFoldermkdir -p $backFileNamemongodump -h 127.0.0.1:27017 -d imooc-chat -u imooc_chat_wheel -p beifen -o $backFileNametar zcvf $backFileName.tar.gz $backFileNamerm -rf $backFileName 12345678910$ sudo sh ./tasks/imooc-chat.backup.sh// 为脚本设置定时uyoung@VM-0-11-ubuntu:~$ crontab -e // 测试定时命令13 00 * * * SH /home/uyoung/tasks/imooc-chat.backup.sh// 完善定时命令 凌晨4点执行00 4 * * * SH /home/uyoung/tasks/imooc-chat.backup.sh]]></content>
      <categories>
        <category>学习册</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[服务器防火墙配置]]></title>
    <url>%2FServer-2%2F</url>
    <content type="text"><![CDATA[服务器防火墙配置更新系统配置iptables-restore安装fail2ban更新系统12uyoung@VM-0-11-ubuntu:~$ sudo apt-get update &amp;&amp; sudo apt-get upgrade 配置iptables-restore12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849uyoung@VM-0-11-ubuntu:~$ sudo iptables -Fuyoung@VM-0-11-ubuntu:~$ sudo vi /etc/iptables.up.rules*filter-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT-A OUTPUT -j ACCEPT-A INPUT -p tcp --dport 443 -j ACCEPT-A INPUT -p tcp --dport 80 -j ACCEPT-A INPUT -p tcp -m state --state NEW --dport 39999 -j ACCEPT# ping-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT# log denied calls-A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied:" --log-level 7# drop incoming sensitive connections-A INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --set-A INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --update --seconds 60 --hitcount 150 -j DROP# reject all other inbound-A INPUT -j REJECT-A FORWARD -j REJECTCOMMIT"/etc/iptables.up.rules" 27L, 459Cuyoung@VM-0-11-ubuntu:~$ sudo vi /etc/iptables.up.rulesuyoung@VM-0-11-ubuntu:~$ sudo iptables-restore &lt; /etc/iptables.up.rulesuyoung@VM-0-11-ubuntu:~$ sudo ufw status //查看防火墙有木有启动Status: inactiveuyoung@VM-0-11-ubuntu:~$ sudo ufw enable //激活防火墙Command may disrupt existing ssh connections. Proceed with operation (y|n)? yFirewall is active and enabled on system startupuyoung@VM-0-11-ubuntu:~$ sudo vi /etc/network/if-up.d/iptables //开启自动启动防火墙#!/bin/shiptables-restore /etc/iptable.up.rulesuyoung@VM-0-11-ubuntu:~$ sudo chmod +x /etc/network/if-up.d/iptables //给脚本权限 安装 Fail2Ban 防御模块12345uyoung@VM-0-11-ubuntu:~$sudo apt-get install fail2banuyoung@VM-0-11-ubuntu:~$ sudo service fail2ban statusuyoung@VM-0-11-ubuntu:~$ sudo service fail2ban stop //停止]]></content>
      <categories>
        <category>学习册</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[服务器添加账户以及秘钥登录]]></title>
    <url>%2FServer-1%2F</url>
    <content type="text"><![CDATA[服务器添加账户以及秘钥登录登录服务器创建一个用户实现秘钥自动登录修改默认登录端口22登录服务器使用SSH命令 用户名@IP 之后输入密码即可登录创建一个用户使用 $sudo adduser 用户名提升用户权限 $sudo gpasswd -a 用户名 sudo继续 $sudo visudo 打开后 在 root ALL=(ALL:ALL) ALL 下面增加一行 用户名 ALL=(ALL:ALL) ALL然后按 Ctrl+X 然后Shift+y 回车保存并且退出实现秘钥自动登录查看用户目录下是否存在 .ssh 文件以及是否生成过秘钥id_res.pub是公钥 id_res是私钥生成秘钥 $ssh-keygen -t rsa -b 4096 -C “zzyouyang@qq.comm” 一路回车生成$eval “$(ssh-agent -s)” 开启ssh代理ssh-add /c/User/我电脑用户名/.ssh/id_rsa 吧ksy添加到代理回到服务器生成秘钥 $ssh-keygen -t rsa -b 4096 -C “zzyouyang@qq.comm” 一路回车生成$eval “$(ssh-agent -s)” 开启ssh代理ssh-add /c/User/我电脑用户名/.ssh/id_rsa 吧ksy添加到代理创建授权文件1234567891011uyoung@VM-0-11-ubuntu:~$ ls -a. .. .bash_history .bash_logout .bashrc .cache .profile .ssh .viminfouyoung@VM-0-11-ubuntu:~$ sodu vim .ssh/authorized_keys// 进入后 按shift+: 输入wq退出// 复制本地公钥内容到authorized_keys 这里// 授权uyoung@VM-0-11-ubuntu:~$ chmod 600 .ssh/authorized_keys// 重启SSH服务uyoung@VM-0-11-ubuntu:~$ sudo service ssh restart 修改默认登录端口22123456789uyoung@VM-0-11-ubuntu:~$ sudo vi /etc/ssh/sshd_config// 修改端口为39999 吧Port 22改为39999// 以及在最底部添加AllowUsers 你的用户名// 重启SSH服务使修改的端口生效uyoung@VM-0-11-ubuntu:~$ sudo service ssh restart// 本地使用 $ssh -p 39999 用户名@IP]]></content>
      <categories>
        <category>学习册</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ReactWEB应用-登录注册功能实现]]></title>
    <url>%2FReactWEB-2%2F</url>
    <content type="text"><![CDATA[登录注册功能实现页面文件结构web开发模式前后端实现文件结构骨架结构实现组件放在Component文件下面页面放在Container文件下面（业务组件）页面入口获取用户信息，决定跳转那个页面开发模式基于Cookie用户验证express依赖cookie-parser，需要npm install cookie-parser –save安装cookie类似于一张身份卡，登录后服务器返回，你带着cookie就可以访问受限资源页cookie的管理浏览器会自动处理]]></content>
      <categories>
        <category>学习册</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ReactWEB应用-前后端联调]]></title>
    <url>%2FReactWEB-1%2F</url>
    <content type="text"><![CDATA[前后端联调使用asios发送异步请求如何发送，端口不一致，使用proxy配置axios拦截器，统一loading处理redux里使用异步数据，渲染页面axios简洁好用的发送请求库，npm install axios –save 安装Axios.interceptors 设置拦截器，比如全局的loadingaxios.get，.post发送请求，返回promise对象Redux里获取数据，然后dispatch即可123456789axios.get('/data').then(res=&gt;res.data).then(cc=&gt;console.log(cc));axios.get('/data').then(res=&gt;console.log(res))axios.get('/data').then(res=&gt;&#123; if (res.status === 200) &#123; this.setState(&#123;data:res.data[0]&#125;) &#125; console.log(res)&#125;) 1234567891011121314151617import axios from 'axios';import &#123; Toast &#125; from 'antd-mobile';// 拦截请求axios.interceptors.request.use(function(config) &#123; Toast.loading('加载中',0) return config&#125;)// 拦截响应axios.interceptors.response.use(function(config) &#123; setTimeout(()=&gt;&#123; Toast.hide() &#125;,2000) return config&#125;)]]></content>
      <categories>
        <category>学习册</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[React学习——4-8]]></title>
    <url>%2FReactStudy%E2%80%94%E2%80%944-8%2F</url>
    <content type="text"><![CDATA[React-router4基础知识React-router4是什么React-router4核心概念React-router4实战React-router4是什么React官方推荐路由库，4是最新版本4是全新的版本，和之前版本不兼容，浏览器和RN均兼容React开发单页面应用必备，践行路由即组件的概念核心概念：动态路由、Router、Link、Switch一个简单的栗子npm install react-router-dom –saveRouter4使用react-router-dom作为浏览器端的路由忘记Router2的内容，拥抱最新Router4入门组件BrowserRouter，包裹整个应用Router 路由对应用渲染的组件，可嵌套Link 跳转专用1234567891011121314151617181920212223class Test extends React.Component&#123; render()&#123; console.log(this.props) return &lt;h2&gt;测试组件&#123;this.props.match.params.location&#125;&lt;/h2&gt; &#125;&#125;ReactDom.render( &lt;Provider store=&#123;store&#125; &gt; &lt;BrowserRouter&gt; &lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;Link to='/'&gt;一营&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to='/erying'&gt;二营&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to='/qibinglian'&gt;骑兵连&lt;/Link&gt;&lt;/li&gt; &lt;/ul&gt; &lt;Route path='/' exact component=&#123;App&#125;&gt;&lt;/Route&gt; &lt;Route path='/:location' component=&#123;Test&#125;&gt;&lt;/Route&gt; &lt;/div&gt; &lt;/BrowserRouter&gt; &lt;/Provider&gt;, document.getElementById('root')) 其他组件 url参数，Route组件参数可用冒号标识参数Redirect组件跳转Switch只渲染一个子Route组件 12345678910111213141516171819202122ReactDom.render( &lt;Provider store=&#123;store&#125; &gt; &lt;BrowserRouter&gt; &lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;Link to='/'&gt;一营&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to='/erying'&gt;二营&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to='/qibinglian'&gt;骑兵连&lt;/Link&gt;&lt;/li&gt; &lt;/ul&gt; &lt;Switch&gt; &#123;/* 只渲染命中的第一个Route */&#125; &lt;Route path='/' exact component=&#123;App&#125;&gt;&lt;/Route&gt; &lt;Route path='/erying' component=&#123;Erying&#125;&gt;&lt;/Route&gt; &lt;Route path='/qibinglian' component=&#123;Qibinglian&#125;&gt;&lt;/Route&gt; &lt;Route path='/:location' component=&#123;Test&#125;&gt;&lt;/Route&gt; &lt;/Switch&gt; &lt;/div&gt; &lt;/BrowserRouter&gt; &lt;/Provider&gt;, document.getElementById('root'))]]></content>
      <categories>
        <category>学习册</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[React学习——4-4]]></title>
    <url>%2FReactStudy%E2%80%94%E2%80%944-4%2F</url>
    <content type="text"><![CDATA[更近一步处理异步、调试工具、更优雅的和react结合Redux处理异步，需要redux-thunk插件Npm install redux-devtools-extension 并且开启使用react-redux优雅的链接react和redux处理异步Redux默认只处理同步，异步任务需要react-thunk插件Npm install redux-thunk –save使用applyMiddleware开启thunk中间件Action可以返回函数，使用dispatch提交action1234567891011121314151617181920212223242526272829303132import React from 'react';import ReactDom from 'react-dom';import &#123; createStore, applyMiddleware &#125; from 'redux';import thunk from 'redux-thunk';import App from './App';import &#123; counter, addGun,removeGun, addGunAsync &#125; from './index.redux';const store = createStore(counter, applyMiddleware(thunk))function render() &#123; ReactDom.render( &lt;App store=&#123;store&#125; addGun=&#123;addGun&#125; addGunAsync=&#123;addGunAsync&#125; removeGun=&#123;removeGun&#125; /&gt;, document.getElementById('root') )&#125;render()store.subscribe(render)// 延迟添加，拖两天再给export function addGunAsync() &#123; // thunk插件的作用，这里可以返回函数 return dispatch=&gt;&#123; setTimeout(()=&gt;&#123; // 异步结束后，手动执行dispatch dispatch(addGun()) &#125;, 2000) &#125;&#125; 调试工具 Chrome 搜索redux 安装新建store的时候判断 window.devToolsExtension使用compose结合thunk和 window.devToolsExtension调试窗口的redux选项卡，实时看到state 12345678910111213import React from 'react';import ReactDom from 'react-dom';import &#123; createStore, applyMiddleware, compose &#125; from 'redux';import thunk from 'redux-thunk';import App from './App';import &#123; counter, addGun,removeGun, addGunAsync &#125; from './index.redux';const store = createStore(counter, compose( applyMiddleware(thunk), window.devToolsExtension ? window.devToolsExtension() : f=&gt;f)) 使用react-redux npm install react-redux –save忘记subscribe，记住reducer，action和dispatch即可React-redux提供Provider和connect两个接口来链接 Provider组件在应用最外层，传入store即可，只用一次Connect负责从外部获取组件需要的参数Connect可以用装饰器的方式来写 1234567891011121314151617181920212223242526//App.jsimport React from 'react';import &#123; connect &#125; from 'react-redux';import &#123;addGun, removeGun, addGunAsync&#125; from './index.redux';class App extends React.Component&#123; // constructor(props) &#123; // super(props); // &#125; render()&#123; return ( &lt;div&gt; &lt;h1&gt;现在有机枪&#123;this.props.num&#125;把&lt;/h1&gt; &lt;button onClick=&#123;this.props.addGun&#125;&gt;申请武器&lt;/button&gt; &lt;button onClick=&#123;this.props.removeGun&#125;&gt;上交武器&lt;/button&gt; &lt;button onClick=&#123;this.props.addGunAsync&#125;&gt;拖两天给&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;const mapStatetoProps = (state) =&gt; &#123; return &#123;num:state&#125;&#125;const actionCreators = &#123;addGun, removeGun, addGunAsync&#125;App = connect(mapStatetoProps, actionCreators)(App)export default App; 1234567891011121314151617181920212223// index.jsimport React from 'react';import ReactDom from 'react-dom';import &#123; createStore, applyMiddleware, compose &#125; from 'redux';import thunk from 'redux-thunk';import &#123; Provider &#125; from 'react-redux';import App from './App';import &#123; counter &#125; from './index.redux';const store = createStore(counter, compose( applyMiddleware(thunk), window.devToolsExtension ? window.devToolsExtension() : f=&gt;f))ReactDom.render( (&lt;Provider store=&#123;store&#125; &gt; &lt;App /&gt; &lt;/Provider&gt;), document.getElementById('root')) 使用装饰器优化connect代码 npm run ejctnpm install babel-plugin-transform-decorators-legacy插件Package.json 里 babel加上plugins配置 12345678910// package.json "babel": &#123; "presets": [ "react-app" ], "plugins": [ "transform-decorators-legacy", ] &#125; // App.js // const mapStatetoProps = (state) =&gt; { // return {num:state} // } // const actionCreators = {addGun, removeGun, addGunAsync} // App = connect(mapStatetoProps, actionCreators)(App) @connect( //你要state什么属性放到props里 state=&gt;({num:state}), //你要什么方法，放到props里，知道dispatch {addGun, removeGun, addGunAsync} )]]></content>
      <categories>
        <category>学习册</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[React学习——4-1]]></title>
    <url>%2FReactStudy%E2%80%94%E2%80%944-1%2F</url>
    <content type="text"><![CDATA[Redux 基础知识1.Redux是什么2.Redux核心概念3.Redux实战Redux是什么专注于状态管理单一状态，单向数据流核心概念：store, state, action, reducerRedux主要功能store所有人的状态，在哪里都有记录(state)需要改变的时候，需要告诉专员（dispatch）要干什么(action)处理变化的人(reducer)拿到state和action，生成新的state首先通过reducer新建store，随后通过store.getState获取状态需要状态变更，store.dispatch(action)来修改状态Reducer函数接收state和action，返回新的state，可以用store.subscribe监听每次修改]]></content>
      <categories>
        <category>学习册</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[React学习——3-7]]></title>
    <url>%2FReactStudy%E2%80%94%E2%80%943-7%2F</url>
    <content type="text"><![CDATA[antd-mobile使用antd-mobile使用 npm install antd-mobile@next –save 安装最新版123456组件使用实例：import &#123; Button &#125; from 'antd-mobile';import 'antd-mobile/dist/antd-mobile.css';ReactDOM.render(&lt;Button&gt;Start&lt;/Button&gt;, mountNode); 按需加载 使用 babel-plugin-import（推荐）。 1234567// .babelrc or babel-loader option&#123; "plugins": [ ["import", &#123; libraryName: "antd-mobile", style: "css" &#125;] // `style: true` 会加载 less 文件 ]&#125; 然后只需从 antd-mobile 引入模块即可，无需单独引入样式。 123// babel-plugin-import 会帮助你加载 JS 和 CSSimport &#123; DatePicker &#125; from 'antd-mobile';]]></content>
      <categories>
        <category>学习册</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[React学习——3-1]]></title>
    <url>%2FReactStudy%E2%80%94%E2%80%943-1%2F</url>
    <content type="text"><![CDATA[React基础知识1.Reacts 是什么2.实用React实现组件化3.React如何进阶实用4.事件5.生命周期更新Reactnpm install –save react@next react-dom@next组件之间传递数据组件之间用props传递数据使用&lt;组件 数据=“值” &gt;的形式传递组件里使用this.props获取值如果组件只有 render 函数，还可以用函数的形式写组件1234567891011121314151617181920212223242526import React from 'react';class App extends React.Component&#123; render() &#123; const boss = '李云龙' return ( &lt;div&gt; &lt;h2&gt;独立团，&#123;boss&#125;&lt;/h2&gt; &lt;YiYing buff='张大喵' /&gt; &lt;Qbl buff='孙德胜' /&gt; &lt;/div&gt; ) &#125;&#125;function Qbl(props)&#123; return &lt;h2&gt;骑兵连连长&#123;props.buff&#125;，冲啊！&lt;/h2&gt;&#125;class YiYing extends React.Component&#123; render() &#123; return &lt;h2&gt;一营营长，&#123;this.props.buff&#125;&lt;/h2&gt; &#125;&#125;export default App 组件内部state 组件内部通过state管理状态jsx本质就是js，所以可以直接 数组.map渲染列表Constructor（构造函数） 设置初始状态，记得执行super（props）如State就是一个不可变的对象，使用this.state获取 1234567891011121314151617181920class YiYing extends React.Component&#123; constructor(props) &#123; super(props); this.state = &#123; solders:['虎子', '柱子', '王根生'] &#125; &#125; render() &#123; return ( &lt;div&gt; &lt;h2&gt;一营营长，&#123;this.props.buff&#125;&lt;/h2&gt; &lt;ul&gt; &#123;this.state.solders.map((value, key)=&gt;&#123; return &lt;li key=&#123;key&#125;&gt;&#123;key&#125;.&#123;value&#125;&lt;/li&gt; &#125;)&#125; &lt;/ul&gt; &lt;/div&gt; ) &#125;&#125; 事件 JSX里，onClick={this.函数名}来绑定事件this引用的问题，需要在构造函数里用bind绑定thisthis.setState修改state，记得返回新的state，而不是修改 123456&lt;button onClick=&#123;()=&gt;this.addSolder()&#125;&gt;新兵入伍&lt;/button&gt;&lt;button onClick=&#123;this.addSolder.bind(this)&#125;&gt;新兵入伍&lt;/button&gt;this.addSolder = this.addSolder.bind(this)&lt;button onClick=&#123;this.addSolder&#125;&gt;新兵入伍&lt;/button&gt; React生命周期 React组件有若干钩子函数，在组件不同的状态执行初始化周期组件重新渲染生命周期组件卸载生命周期 123456789101112131415161718192021222324252627282930class YiYing extends React.Component&#123; constructor(props) &#123; super(props); this.state = &#123; solders:['虎子', '柱子', '王根生'] &#125; &#125; componentWillMount() &#123; console.log('组件马上渲染') &#125; componentDidMount()&#123; console.log('组件加载完毕') &#125; render() &#123; console.log('组件正在加载') return ( &lt;div&gt; &lt;ul&gt; &#123;this.state.solders.map((value, key)=&gt;&#123; return &lt;li key=&#123;key&#125;&gt;&#123;key&#125;.&#123;value&#125;&lt;/li&gt; &#125;)&#125; &lt;/ul&gt; &lt;/div&gt; ) &#125; &#125;]]></content>
      <categories>
        <category>学习册</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[React学习——2-3]]></title>
    <url>%2FReactStudy%E2%80%94%E2%80%942-3%2F</url>
    <content type="text"><![CDATA[Express + mongodb 开发web后台接口1.Express 开发web接口2.非关系型数据库mongodb3.使用nodejs的mongoose模块链接和操作mongodbExpress基于nodejs，快速、开发极简的web开发框架npm install express -save 安装expresshello world 应用监听路由和响应内容，使用nodemon自动重启 npm install -g nodemon其他的特性app.get、app.post分别开发get和post接口app.use使用模块代res.send（返回文本）、res.json（返回json）、res.sendfile（返回文件）响应不同的内容123456789101112131415const express = require('express')const app = express()app.get('/',function(req,res)&#123; res.send('&lt;h1&gt;Hello word&lt;/h1&gt;')&#125;)app.get('/data',function(req,res)&#123; res.json(&#123;name: 'imooc', type: 'IT'&#125;)&#125;)app.listen(9093, function()&#123; console.log('Node app start at port 9093')&#125;) node server/server.js //启动node servernodemon erver/server.js //启动node server mongodb + mongoose 非关系型数据库官网。。。。。。下载、安装mongoos安装 npm install mongoose -save通过mongoose操作mongodb，存储的就是json，相对mysql来说要易用很多Connect链接数据库定义文档模型，Schema和mode新建模型 123456789101112131415const mongoose = require('mongoose')//链接mongo 并且使用imooc这个集合const DB_URL = 'mongodb://127.0.0.1:27017/imooc'mongoose.connect(DB_URL)mongoose.connection.on('connected', function()&#123; console.log('mongo connect success')&#125;)//类似于mysql的表 mongo里有文档、字段的概念const User = mongoose.model('user', new mongoose.Schema(&#123; user:&#123;type:String, require:true&#125;, age:&#123;type:Number, require:true&#125;&#125;)) String、Number 等数据结构定create、remove、update分别用来增、删、改的操作Find和findOne用来查询数据1234567891011121314151617181920212223242526272829303132333435 新增一个用户信息User.create(&#123; user:'xiaoming', age:15&#125;,function(err, doc)&#123; if(!err) &#123; console.log(doc) &#125;else&#123; console.log(err) &#125;&#125;) 删除agr=18的对象User.remove(&#123;age:18&#125;,function(err, doc)&#123; if(!err)&#123; console.log('delete success') User.find(&#123;&#125;,function(e, d)&#123; console.log(d) &#125;) &#125;else&#123; console.log(err) &#125;&#125;)更新User.update(&#123;'user':'xiaoming'&#125;,&#123;'$set':&#123;age:26&#125;&#125;, function(err, doc)&#123; console.log(doc)&#125;)app.get('/data', function(req,res)&#123; User.find(&#123;&#125;, function(err,doc)&#123; res.json(doc) &#125;)&#125;) mongod –dbpath F:\MongoDBData //启动mongodb]]></content>
      <categories>
        <category>学习册</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[离别，第一份工作]]></title>
    <url>%2Flibie-xindongfang%2F</url>
    <content type="text"><![CDATA[离别只是新的开始吐槽三月用坏了单位两台电脑，导致我心态崩溃。之后写述职报告的时候，我的所有资料平均分布在三台电脑两台坏的，我要是想取回资料就要把两台坏的硬盘拆掉，我资料转移到新的电脑上。我工作打开PS各种切图崩溃，打开PS后我都敢开很多浏览器。 ​ 再见，离别只是新的开始]]></content>
      <categories>
        <category>事件簿</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
